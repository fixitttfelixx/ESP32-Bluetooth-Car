#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

int motorLdir1 = 27;
int motorLdir2 = 26;

int motorRdir1 = 13;
int motorRdir2 = 12;

#define SERVICE_UUID "12345678-1234-1234-1234-1234567890ab"
#define CHARACTERISTIC_UUID "abcd1234-5678-90ab-cdef-1234567890ab"

BLECharacteristic* pCharacteristic;

class MyCallbacks : public BLECharacteristicCallbacks {
  void onWrite(BLECharacteristic* pCharacteristic) {
    const uint8_t* data = pCharacteristic->getData();
    size_t length = pCharacteristic->getLength();

    if (length >= 7) {  // Dabble Gamepad always sends 8 bytes
      uint8_t direction = data[6];

      Serial.print("Direction: ");
      switch (direction) {
        case 1:
          Serial.println("UP");

          digitalWrite(motorLdir1, LOW);
          digitalWrite(motorLdir2, HIGH);
          digitalWrite(motorRdir1, LOW);
          digitalWrite(motorRdir2, HIGH);

          break;
        case 2:
          Serial.println("DOWN");

          digitalWrite(motorLdir1, HIGH);
          digitalWrite(motorLdir2, LOW);
          digitalWrite(motorRdir1, HIGH);
          digitalWrite(motorRdir2, LOW);

          break;
        case 4:
          Serial.println("LEFT");

          digitalWrite(motorLdir1, HIGH);
          digitalWrite(motorLdir2, LOW);
          digitalWrite(motorRdir1, LOW);
          digitalWrite(motorRdir2, HIGH);

          break;
        case 8:
          Serial.println("RIGHT");

          digitalWrite(motorLdir1, LOW);
          digitalWrite(motorLdir2, HIGH);
          digitalWrite(motorRdir1, HIGH);
          digitalWrite(motorRdir2, LOW);

          break;
        case 0:
          Serial.println("STOP");

          digitalWrite(motorLdir1, LOW);
          digitalWrite(motorLdir2, LOW);
          digitalWrite(motorRdir1, LOW);
          digitalWrite(motorRdir2, LOW);

          break;
        default:
          Serial.print("Unknown code: ");
          Serial.println(direction);
      }
    } else {
      Serial.println("Received malformed packet.");
    }
  }
};

void setup() {
  Serial.begin(115200);

  pinMode(motorLdir1, OUTPUT);
  pinMode(motorLdir2, OUTPUT);
  pinMode(motorRdir1, OUTPUT);
  pinMode(motorRdir2, OUTPUT);

  BLEDevice::init("ESP32carrr");
  BLEServer* pServer = BLEDevice::createServer();
  BLEService* pService = pServer->createService(SERVICE_UUID);

  pCharacteristic = pService->createCharacteristic(
    CHARACTERISTIC_UUID,
    BLECharacteristic::PROPERTY_WRITE);

  pCharacteristic->setCallbacks(new MyCallbacks());
  pService->start();

  BLEAdvertising* pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->start();

  Serial.println("BLE started. Waiting for Dabble Gamepad input...");
}

void loop() {
  // No logic needed here
}
